//! > Test loop.

//! > test_runner_name
test_generated_function

//! > function
fn foo(y: felt252) -> felt252 {
    let mut x = 5;
    while x != 0 {
        x = x - 1;
    };
    x
}

//! > function_name
foo

//! > module_code

//! > semantic_diagnostics

//! > lowering_diagnostics

//! > lowering_flat
Parameters:

//! > lowering
Main:
Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 5u
  (v3: core::felt252, v2: ()) <- test::foo[expr12](v1)
End:
  Return(v3)


Final lowering:
Parameters: v12: core::RangeCheck, v13: core::gas::GasBuiltin, v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252) <- 5u
  (v14: core::RangeCheck, v15: core::gas::GasBuiltin, v4: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[expr12](v12, v13, v1)
End:
  Match(match_enum(v4) {
    PanicResult::Ok(v5) => blk1,
    PanicResult::Err(v8) => blk2,
  })

blk1:
Statements:
  (v6: core::felt252, v7: ()) <- struct_destructure(v5)
  (v9: (core::felt252,)) <- struct_construct(v6)
  (v10: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Ok(v9)
End:
  Return(v14, v15, v10)

blk2:
Statements:
  (v11: core::panics::PanicResult::<(core::felt252,)>) <- PanicResult::Err(v8)
End:
  Return(v14, v15, v11)


Generated lowering for source location:
    while x != 0 {
    ^************^

Parameters: v0: core::felt252
blk0 (root):
Statements:
  (v1: core::felt252, v2: @core::felt252) <- snapshot(v0)
  (v3: core::felt252) <- 0u
  (v4: core::felt252, v5: @core::felt252) <- snapshot(v3)
  (v6: core::bool) <- core::Felt252PartialEq::ne(v2, v5)
End:
  Match(match_enum(v6) {
    bool::False(v12) => blk2,
    bool::True(v7) => blk1,
  })

blk1:
Statements:
  (v8: core::felt252) <- 1u
  (v9: core::felt252) <- core::Felt252Sub::sub(v1, v8)
  (v11: core::felt252, v10: ()) <- test::foo[expr12](v9)
End:
  Return(v11, v10)

blk2:
Statements:
End:
  Goto(blk3, {})

blk3:
Statements:
  (v13: ()) <- struct_construct()
End:
  Return(v1, v13)


Final lowering:
Parameters: v51: core::RangeCheck, v52: core::gas::GasBuiltin, v0: core::felt252
blk0 (root):
Statements:
  (v39: core::gas::BuiltinCosts) <- core::gas::get_builtin_costs()
End:
  Match(match core::gas::withdraw_gas_all(v51, v52, v39) {
    Option::Some(v53, v54) => blk1,
    Option::None(v55, v56) => blk6,
  })

blk1:
Statements:
  (v1: core::felt252, v2: @core::felt252) <- snapshot(v0)
  (v14: core::felt252) <- desnap(v2)
  (v15: core::felt252, v16: @core::felt252) <- snapshot(v14)
  (v23: core::felt252) <- desnap(v16)
End:
  Match(match core::felt252_is_zero(v23) {
    IsZeroResult::Zero => blk2,
    IsZeroResult::NonZero(v26) => blk3,
  })

blk2:
Statements:
  (v13: ()) <- struct_construct()
  (v40: (core::felt252, ())) <- struct_construct(v1, v13)
  (v41: core::panics::PanicResult::<(core::felt252, ())>) <- PanicResult::Ok(v40)
End:
  Return(v53, v54, v41)

blk3:
Statements:
  (v8: core::felt252) <- 1u
  (v22: core::felt252) <- core::felt252_sub(v1, v8)
  (v75: core::RangeCheck, v76: core::gas::GasBuiltin, v42: core::panics::PanicResult::<(core::felt252, ())>) <- test::foo[expr12](v53, v54, v22)
End:
  Match(match_enum(v42) {
    PanicResult::Ok(v43) => blk4,
    PanicResult::Err(v46) => blk5,
  })

blk4:
Statements:
  (v44: core::felt252, v45: ()) <- struct_destructure(v43)
  (v48: (core::felt252, ())) <- struct_construct(v44, v45)
  (v49: core::panics::PanicResult::<(core::felt252, ())>) <- PanicResult::Ok(v48)
End:
  Return(v75, v76, v49)

blk5:
Statements:
  (v50: core::panics::PanicResult::<(core::felt252, ())>) <- PanicResult::Err(v46)
End:
  Return(v75, v76, v50)

blk6:
Statements:
  (v34: core::array::Array::<core::felt252>) <- core::array::array_new::<core::felt252>()
  (v35: core::felt252) <- 375233589013918064796019u
  (v37: core::array::Array::<core::felt252>) <- core::array::array_append::<core::felt252>(v34, v35)
  (v36: core::panics::Panic) <- struct_construct()
  (v38: (core::panics::Panic, core::array::Array::<core::felt252>)) <- struct_construct(v36, v37)
  (v47: core::panics::PanicResult::<(core::felt252, ())>) <- PanicResult::Err(v38)
End:
  Return(v55, v56, v47)
